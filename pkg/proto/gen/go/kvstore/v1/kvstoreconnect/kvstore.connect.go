// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: kvstore/v1/kvstore.proto

package kvstoreconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/atticplaygroup/pkv/pkg/proto/gen/go/kvstore/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// KvStoreServiceName is the fully-qualified name of the KvStoreService service.
	KvStoreServiceName = "kvstore.v1.KvStoreService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// KvStoreServiceCreateValueProcedure is the fully-qualified name of the KvStoreService's
	// CreateValue RPC.
	KvStoreServiceCreateValueProcedure = "/kvstore.v1.KvStoreService/CreateValue"
	// KvStoreServiceCreateStreamValueProcedure is the fully-qualified name of the KvStoreService's
	// CreateStreamValue RPC.
	KvStoreServiceCreateStreamValueProcedure = "/kvstore.v1.KvStoreService/CreateStreamValue"
	// KvStoreServiceGetValueProcedure is the fully-qualified name of the KvStoreService's GetValue RPC.
	KvStoreServiceGetValueProcedure = "/kvstore.v1.KvStoreService/GetValue"
	// KvStoreServiceGetStreamValueProcedure is the fully-qualified name of the KvStoreService's
	// GetStreamValue RPC.
	KvStoreServiceGetStreamValueProcedure = "/kvstore.v1.KvStoreService/GetStreamValue"
	// KvStoreServiceListStreamValuesProcedure is the fully-qualified name of the KvStoreService's
	// ListStreamValues RPC.
	KvStoreServiceListStreamValuesProcedure = "/kvstore.v1.KvStoreService/ListStreamValues"
	// KvStoreServiceProlongValueProcedure is the fully-qualified name of the KvStoreService's
	// ProlongValue RPC.
	KvStoreServiceProlongValueProcedure = "/kvstore.v1.KvStoreService/ProlongValue"
	// KvStoreServiceSearchCidProcedure is the fully-qualified name of the KvStoreService's SearchCid
	// RPC.
	KvStoreServiceSearchCidProcedure = "/kvstore.v1.KvStoreService/SearchCid"
	// KvStoreServiceSearchInstanceProcedure is the fully-qualified name of the KvStoreService's
	// SearchInstance RPC.
	KvStoreServiceSearchInstanceProcedure = "/kvstore.v1.KvStoreService/SearchInstance"
	// KvStoreServiceCreateSessionProcedure is the fully-qualified name of the KvStoreService's
	// CreateSession RPC.
	KvStoreServiceCreateSessionProcedure = "/kvstore.v1.KvStoreService/CreateSession"
	// KvStoreServiceRegisterInstanceProcedure is the fully-qualified name of the KvStoreService's
	// RegisterInstance RPC.
	KvStoreServiceRegisterInstanceProcedure = "/kvstore.v1.KvStoreService/RegisterInstance"
	// KvStoreServicePingProcedure is the fully-qualified name of the KvStoreService's Ping RPC.
	KvStoreServicePingProcedure = "/kvstore.v1.KvStoreService/Ping"
	// KvStoreServiceDelegatedRoutingProcedure is the fully-qualified name of the KvStoreService's
	// DelegatedRouting RPC.
	KvStoreServiceDelegatedRoutingProcedure = "/kvstore.v1.KvStoreService/DelegatedRouting"
)

// KvStoreServiceClient is a client for the kvstore.v1.KvStoreService service.
type KvStoreServiceClient interface {
	CreateValue(context.Context, *connect.Request[v1.CreateValueRequest]) (*connect.Response[v1.CreateValueResponse], error)
	CreateStreamValue(context.Context, *connect.Request[v1.CreateStreamValueRequest]) (*connect.Response[v1.CreateStreamValueResponse], error)
	GetValue(context.Context, *connect.Request[v1.GetValueRequest]) (*connect.Response[v1.GetValueResponse], error)
	GetStreamValue(context.Context, *connect.Request[v1.GetStreamValueRequest]) (*connect.Response[v1.GetStreamValueResponse], error)
	ListStreamValues(context.Context, *connect.Request[v1.ListStreamValuesRequest]) (*connect.Response[v1.ListStreamValuesResponse], error)
	ProlongValue(context.Context, *connect.Request[v1.ProlongValueRequest]) (*connect.Response[v1.ProlongValueResponse], error)
	SearchCid(context.Context, *connect.Request[v1.SearchCidRequest]) (*connect.Response[v1.SearchCidResponse], error)
	SearchInstance(context.Context, *connect.Request[v1.SearchInstanceRequest]) (*connect.Response[v1.SearchInstanceResponse], error)
	CreateSession(context.Context, *connect.Request[v1.CreateSessionRequest]) (*connect.Response[v1.CreateSessionResponse], error)
	RegisterInstance(context.Context, *connect.Request[v1.RegisterInstanceRequest]) (*connect.Response[v1.RegisterInstanceResponse], error)
	Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error)
	DelegatedRouting(context.Context, *connect.Request[v1.DelegatedRoutingRequest]) (*connect.Response[v1.DelegatedRoutingResponse], error)
}

// NewKvStoreServiceClient constructs a client for the kvstore.v1.KvStoreService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewKvStoreServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) KvStoreServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	kvStoreServiceMethods := v1.File_kvstore_v1_kvstore_proto.Services().ByName("KvStoreService").Methods()
	return &kvStoreServiceClient{
		createValue: connect.NewClient[v1.CreateValueRequest, v1.CreateValueResponse](
			httpClient,
			baseURL+KvStoreServiceCreateValueProcedure,
			connect.WithSchema(kvStoreServiceMethods.ByName("CreateValue")),
			connect.WithClientOptions(opts...),
		),
		createStreamValue: connect.NewClient[v1.CreateStreamValueRequest, v1.CreateStreamValueResponse](
			httpClient,
			baseURL+KvStoreServiceCreateStreamValueProcedure,
			connect.WithSchema(kvStoreServiceMethods.ByName("CreateStreamValue")),
			connect.WithClientOptions(opts...),
		),
		getValue: connect.NewClient[v1.GetValueRequest, v1.GetValueResponse](
			httpClient,
			baseURL+KvStoreServiceGetValueProcedure,
			connect.WithSchema(kvStoreServiceMethods.ByName("GetValue")),
			connect.WithClientOptions(opts...),
		),
		getStreamValue: connect.NewClient[v1.GetStreamValueRequest, v1.GetStreamValueResponse](
			httpClient,
			baseURL+KvStoreServiceGetStreamValueProcedure,
			connect.WithSchema(kvStoreServiceMethods.ByName("GetStreamValue")),
			connect.WithClientOptions(opts...),
		),
		listStreamValues: connect.NewClient[v1.ListStreamValuesRequest, v1.ListStreamValuesResponse](
			httpClient,
			baseURL+KvStoreServiceListStreamValuesProcedure,
			connect.WithSchema(kvStoreServiceMethods.ByName("ListStreamValues")),
			connect.WithClientOptions(opts...),
		),
		prolongValue: connect.NewClient[v1.ProlongValueRequest, v1.ProlongValueResponse](
			httpClient,
			baseURL+KvStoreServiceProlongValueProcedure,
			connect.WithSchema(kvStoreServiceMethods.ByName("ProlongValue")),
			connect.WithClientOptions(opts...),
		),
		searchCid: connect.NewClient[v1.SearchCidRequest, v1.SearchCidResponse](
			httpClient,
			baseURL+KvStoreServiceSearchCidProcedure,
			connect.WithSchema(kvStoreServiceMethods.ByName("SearchCid")),
			connect.WithClientOptions(opts...),
		),
		searchInstance: connect.NewClient[v1.SearchInstanceRequest, v1.SearchInstanceResponse](
			httpClient,
			baseURL+KvStoreServiceSearchInstanceProcedure,
			connect.WithSchema(kvStoreServiceMethods.ByName("SearchInstance")),
			connect.WithClientOptions(opts...),
		),
		createSession: connect.NewClient[v1.CreateSessionRequest, v1.CreateSessionResponse](
			httpClient,
			baseURL+KvStoreServiceCreateSessionProcedure,
			connect.WithSchema(kvStoreServiceMethods.ByName("CreateSession")),
			connect.WithClientOptions(opts...),
		),
		registerInstance: connect.NewClient[v1.RegisterInstanceRequest, v1.RegisterInstanceResponse](
			httpClient,
			baseURL+KvStoreServiceRegisterInstanceProcedure,
			connect.WithSchema(kvStoreServiceMethods.ByName("RegisterInstance")),
			connect.WithClientOptions(opts...),
		),
		ping: connect.NewClient[v1.PingRequest, v1.PingResponse](
			httpClient,
			baseURL+KvStoreServicePingProcedure,
			connect.WithSchema(kvStoreServiceMethods.ByName("Ping")),
			connect.WithClientOptions(opts...),
		),
		delegatedRouting: connect.NewClient[v1.DelegatedRoutingRequest, v1.DelegatedRoutingResponse](
			httpClient,
			baseURL+KvStoreServiceDelegatedRoutingProcedure,
			connect.WithSchema(kvStoreServiceMethods.ByName("DelegatedRouting")),
			connect.WithClientOptions(opts...),
		),
	}
}

// kvStoreServiceClient implements KvStoreServiceClient.
type kvStoreServiceClient struct {
	createValue       *connect.Client[v1.CreateValueRequest, v1.CreateValueResponse]
	createStreamValue *connect.Client[v1.CreateStreamValueRequest, v1.CreateStreamValueResponse]
	getValue          *connect.Client[v1.GetValueRequest, v1.GetValueResponse]
	getStreamValue    *connect.Client[v1.GetStreamValueRequest, v1.GetStreamValueResponse]
	listStreamValues  *connect.Client[v1.ListStreamValuesRequest, v1.ListStreamValuesResponse]
	prolongValue      *connect.Client[v1.ProlongValueRequest, v1.ProlongValueResponse]
	searchCid         *connect.Client[v1.SearchCidRequest, v1.SearchCidResponse]
	searchInstance    *connect.Client[v1.SearchInstanceRequest, v1.SearchInstanceResponse]
	createSession     *connect.Client[v1.CreateSessionRequest, v1.CreateSessionResponse]
	registerInstance  *connect.Client[v1.RegisterInstanceRequest, v1.RegisterInstanceResponse]
	ping              *connect.Client[v1.PingRequest, v1.PingResponse]
	delegatedRouting  *connect.Client[v1.DelegatedRoutingRequest, v1.DelegatedRoutingResponse]
}

// CreateValue calls kvstore.v1.KvStoreService.CreateValue.
func (c *kvStoreServiceClient) CreateValue(ctx context.Context, req *connect.Request[v1.CreateValueRequest]) (*connect.Response[v1.CreateValueResponse], error) {
	return c.createValue.CallUnary(ctx, req)
}

// CreateStreamValue calls kvstore.v1.KvStoreService.CreateStreamValue.
func (c *kvStoreServiceClient) CreateStreamValue(ctx context.Context, req *connect.Request[v1.CreateStreamValueRequest]) (*connect.Response[v1.CreateStreamValueResponse], error) {
	return c.createStreamValue.CallUnary(ctx, req)
}

// GetValue calls kvstore.v1.KvStoreService.GetValue.
func (c *kvStoreServiceClient) GetValue(ctx context.Context, req *connect.Request[v1.GetValueRequest]) (*connect.Response[v1.GetValueResponse], error) {
	return c.getValue.CallUnary(ctx, req)
}

// GetStreamValue calls kvstore.v1.KvStoreService.GetStreamValue.
func (c *kvStoreServiceClient) GetStreamValue(ctx context.Context, req *connect.Request[v1.GetStreamValueRequest]) (*connect.Response[v1.GetStreamValueResponse], error) {
	return c.getStreamValue.CallUnary(ctx, req)
}

// ListStreamValues calls kvstore.v1.KvStoreService.ListStreamValues.
func (c *kvStoreServiceClient) ListStreamValues(ctx context.Context, req *connect.Request[v1.ListStreamValuesRequest]) (*connect.Response[v1.ListStreamValuesResponse], error) {
	return c.listStreamValues.CallUnary(ctx, req)
}

// ProlongValue calls kvstore.v1.KvStoreService.ProlongValue.
func (c *kvStoreServiceClient) ProlongValue(ctx context.Context, req *connect.Request[v1.ProlongValueRequest]) (*connect.Response[v1.ProlongValueResponse], error) {
	return c.prolongValue.CallUnary(ctx, req)
}

// SearchCid calls kvstore.v1.KvStoreService.SearchCid.
func (c *kvStoreServiceClient) SearchCid(ctx context.Context, req *connect.Request[v1.SearchCidRequest]) (*connect.Response[v1.SearchCidResponse], error) {
	return c.searchCid.CallUnary(ctx, req)
}

// SearchInstance calls kvstore.v1.KvStoreService.SearchInstance.
func (c *kvStoreServiceClient) SearchInstance(ctx context.Context, req *connect.Request[v1.SearchInstanceRequest]) (*connect.Response[v1.SearchInstanceResponse], error) {
	return c.searchInstance.CallUnary(ctx, req)
}

// CreateSession calls kvstore.v1.KvStoreService.CreateSession.
func (c *kvStoreServiceClient) CreateSession(ctx context.Context, req *connect.Request[v1.CreateSessionRequest]) (*connect.Response[v1.CreateSessionResponse], error) {
	return c.createSession.CallUnary(ctx, req)
}

// RegisterInstance calls kvstore.v1.KvStoreService.RegisterInstance.
func (c *kvStoreServiceClient) RegisterInstance(ctx context.Context, req *connect.Request[v1.RegisterInstanceRequest]) (*connect.Response[v1.RegisterInstanceResponse], error) {
	return c.registerInstance.CallUnary(ctx, req)
}

// Ping calls kvstore.v1.KvStoreService.Ping.
func (c *kvStoreServiceClient) Ping(ctx context.Context, req *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error) {
	return c.ping.CallUnary(ctx, req)
}

// DelegatedRouting calls kvstore.v1.KvStoreService.DelegatedRouting.
func (c *kvStoreServiceClient) DelegatedRouting(ctx context.Context, req *connect.Request[v1.DelegatedRoutingRequest]) (*connect.Response[v1.DelegatedRoutingResponse], error) {
	return c.delegatedRouting.CallUnary(ctx, req)
}

// KvStoreServiceHandler is an implementation of the kvstore.v1.KvStoreService service.
type KvStoreServiceHandler interface {
	CreateValue(context.Context, *connect.Request[v1.CreateValueRequest]) (*connect.Response[v1.CreateValueResponse], error)
	CreateStreamValue(context.Context, *connect.Request[v1.CreateStreamValueRequest]) (*connect.Response[v1.CreateStreamValueResponse], error)
	GetValue(context.Context, *connect.Request[v1.GetValueRequest]) (*connect.Response[v1.GetValueResponse], error)
	GetStreamValue(context.Context, *connect.Request[v1.GetStreamValueRequest]) (*connect.Response[v1.GetStreamValueResponse], error)
	ListStreamValues(context.Context, *connect.Request[v1.ListStreamValuesRequest]) (*connect.Response[v1.ListStreamValuesResponse], error)
	ProlongValue(context.Context, *connect.Request[v1.ProlongValueRequest]) (*connect.Response[v1.ProlongValueResponse], error)
	SearchCid(context.Context, *connect.Request[v1.SearchCidRequest]) (*connect.Response[v1.SearchCidResponse], error)
	SearchInstance(context.Context, *connect.Request[v1.SearchInstanceRequest]) (*connect.Response[v1.SearchInstanceResponse], error)
	CreateSession(context.Context, *connect.Request[v1.CreateSessionRequest]) (*connect.Response[v1.CreateSessionResponse], error)
	RegisterInstance(context.Context, *connect.Request[v1.RegisterInstanceRequest]) (*connect.Response[v1.RegisterInstanceResponse], error)
	Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error)
	DelegatedRouting(context.Context, *connect.Request[v1.DelegatedRoutingRequest]) (*connect.Response[v1.DelegatedRoutingResponse], error)
}

// NewKvStoreServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewKvStoreServiceHandler(svc KvStoreServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	kvStoreServiceMethods := v1.File_kvstore_v1_kvstore_proto.Services().ByName("KvStoreService").Methods()
	kvStoreServiceCreateValueHandler := connect.NewUnaryHandler(
		KvStoreServiceCreateValueProcedure,
		svc.CreateValue,
		connect.WithSchema(kvStoreServiceMethods.ByName("CreateValue")),
		connect.WithHandlerOptions(opts...),
	)
	kvStoreServiceCreateStreamValueHandler := connect.NewUnaryHandler(
		KvStoreServiceCreateStreamValueProcedure,
		svc.CreateStreamValue,
		connect.WithSchema(kvStoreServiceMethods.ByName("CreateStreamValue")),
		connect.WithHandlerOptions(opts...),
	)
	kvStoreServiceGetValueHandler := connect.NewUnaryHandler(
		KvStoreServiceGetValueProcedure,
		svc.GetValue,
		connect.WithSchema(kvStoreServiceMethods.ByName("GetValue")),
		connect.WithHandlerOptions(opts...),
	)
	kvStoreServiceGetStreamValueHandler := connect.NewUnaryHandler(
		KvStoreServiceGetStreamValueProcedure,
		svc.GetStreamValue,
		connect.WithSchema(kvStoreServiceMethods.ByName("GetStreamValue")),
		connect.WithHandlerOptions(opts...),
	)
	kvStoreServiceListStreamValuesHandler := connect.NewUnaryHandler(
		KvStoreServiceListStreamValuesProcedure,
		svc.ListStreamValues,
		connect.WithSchema(kvStoreServiceMethods.ByName("ListStreamValues")),
		connect.WithHandlerOptions(opts...),
	)
	kvStoreServiceProlongValueHandler := connect.NewUnaryHandler(
		KvStoreServiceProlongValueProcedure,
		svc.ProlongValue,
		connect.WithSchema(kvStoreServiceMethods.ByName("ProlongValue")),
		connect.WithHandlerOptions(opts...),
	)
	kvStoreServiceSearchCidHandler := connect.NewUnaryHandler(
		KvStoreServiceSearchCidProcedure,
		svc.SearchCid,
		connect.WithSchema(kvStoreServiceMethods.ByName("SearchCid")),
		connect.WithHandlerOptions(opts...),
	)
	kvStoreServiceSearchInstanceHandler := connect.NewUnaryHandler(
		KvStoreServiceSearchInstanceProcedure,
		svc.SearchInstance,
		connect.WithSchema(kvStoreServiceMethods.ByName("SearchInstance")),
		connect.WithHandlerOptions(opts...),
	)
	kvStoreServiceCreateSessionHandler := connect.NewUnaryHandler(
		KvStoreServiceCreateSessionProcedure,
		svc.CreateSession,
		connect.WithSchema(kvStoreServiceMethods.ByName("CreateSession")),
		connect.WithHandlerOptions(opts...),
	)
	kvStoreServiceRegisterInstanceHandler := connect.NewUnaryHandler(
		KvStoreServiceRegisterInstanceProcedure,
		svc.RegisterInstance,
		connect.WithSchema(kvStoreServiceMethods.ByName("RegisterInstance")),
		connect.WithHandlerOptions(opts...),
	)
	kvStoreServicePingHandler := connect.NewUnaryHandler(
		KvStoreServicePingProcedure,
		svc.Ping,
		connect.WithSchema(kvStoreServiceMethods.ByName("Ping")),
		connect.WithHandlerOptions(opts...),
	)
	kvStoreServiceDelegatedRoutingHandler := connect.NewUnaryHandler(
		KvStoreServiceDelegatedRoutingProcedure,
		svc.DelegatedRouting,
		connect.WithSchema(kvStoreServiceMethods.ByName("DelegatedRouting")),
		connect.WithHandlerOptions(opts...),
	)
	return "/kvstore.v1.KvStoreService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case KvStoreServiceCreateValueProcedure:
			kvStoreServiceCreateValueHandler.ServeHTTP(w, r)
		case KvStoreServiceCreateStreamValueProcedure:
			kvStoreServiceCreateStreamValueHandler.ServeHTTP(w, r)
		case KvStoreServiceGetValueProcedure:
			kvStoreServiceGetValueHandler.ServeHTTP(w, r)
		case KvStoreServiceGetStreamValueProcedure:
			kvStoreServiceGetStreamValueHandler.ServeHTTP(w, r)
		case KvStoreServiceListStreamValuesProcedure:
			kvStoreServiceListStreamValuesHandler.ServeHTTP(w, r)
		case KvStoreServiceProlongValueProcedure:
			kvStoreServiceProlongValueHandler.ServeHTTP(w, r)
		case KvStoreServiceSearchCidProcedure:
			kvStoreServiceSearchCidHandler.ServeHTTP(w, r)
		case KvStoreServiceSearchInstanceProcedure:
			kvStoreServiceSearchInstanceHandler.ServeHTTP(w, r)
		case KvStoreServiceCreateSessionProcedure:
			kvStoreServiceCreateSessionHandler.ServeHTTP(w, r)
		case KvStoreServiceRegisterInstanceProcedure:
			kvStoreServiceRegisterInstanceHandler.ServeHTTP(w, r)
		case KvStoreServicePingProcedure:
			kvStoreServicePingHandler.ServeHTTP(w, r)
		case KvStoreServiceDelegatedRoutingProcedure:
			kvStoreServiceDelegatedRoutingHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedKvStoreServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedKvStoreServiceHandler struct{}

func (UnimplementedKvStoreServiceHandler) CreateValue(context.Context, *connect.Request[v1.CreateValueRequest]) (*connect.Response[v1.CreateValueResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("kvstore.v1.KvStoreService.CreateValue is not implemented"))
}

func (UnimplementedKvStoreServiceHandler) CreateStreamValue(context.Context, *connect.Request[v1.CreateStreamValueRequest]) (*connect.Response[v1.CreateStreamValueResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("kvstore.v1.KvStoreService.CreateStreamValue is not implemented"))
}

func (UnimplementedKvStoreServiceHandler) GetValue(context.Context, *connect.Request[v1.GetValueRequest]) (*connect.Response[v1.GetValueResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("kvstore.v1.KvStoreService.GetValue is not implemented"))
}

func (UnimplementedKvStoreServiceHandler) GetStreamValue(context.Context, *connect.Request[v1.GetStreamValueRequest]) (*connect.Response[v1.GetStreamValueResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("kvstore.v1.KvStoreService.GetStreamValue is not implemented"))
}

func (UnimplementedKvStoreServiceHandler) ListStreamValues(context.Context, *connect.Request[v1.ListStreamValuesRequest]) (*connect.Response[v1.ListStreamValuesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("kvstore.v1.KvStoreService.ListStreamValues is not implemented"))
}

func (UnimplementedKvStoreServiceHandler) ProlongValue(context.Context, *connect.Request[v1.ProlongValueRequest]) (*connect.Response[v1.ProlongValueResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("kvstore.v1.KvStoreService.ProlongValue is not implemented"))
}

func (UnimplementedKvStoreServiceHandler) SearchCid(context.Context, *connect.Request[v1.SearchCidRequest]) (*connect.Response[v1.SearchCidResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("kvstore.v1.KvStoreService.SearchCid is not implemented"))
}

func (UnimplementedKvStoreServiceHandler) SearchInstance(context.Context, *connect.Request[v1.SearchInstanceRequest]) (*connect.Response[v1.SearchInstanceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("kvstore.v1.KvStoreService.SearchInstance is not implemented"))
}

func (UnimplementedKvStoreServiceHandler) CreateSession(context.Context, *connect.Request[v1.CreateSessionRequest]) (*connect.Response[v1.CreateSessionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("kvstore.v1.KvStoreService.CreateSession is not implemented"))
}

func (UnimplementedKvStoreServiceHandler) RegisterInstance(context.Context, *connect.Request[v1.RegisterInstanceRequest]) (*connect.Response[v1.RegisterInstanceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("kvstore.v1.KvStoreService.RegisterInstance is not implemented"))
}

func (UnimplementedKvStoreServiceHandler) Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("kvstore.v1.KvStoreService.Ping is not implemented"))
}

func (UnimplementedKvStoreServiceHandler) DelegatedRouting(context.Context, *connect.Request[v1.DelegatedRoutingRequest]) (*connect.Response[v1.DelegatedRoutingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("kvstore.v1.KvStoreService.DelegatedRouting is not implemented"))
}
